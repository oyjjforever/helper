<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bosssoft.monitor.dao.OrderMapper">
    <select id="queryOrder" resultType="map">
        select a.*
        from order_main a
        <where>
            <if test="name != null">
                name = #{name}
            </if>
            <if test="address != null">
                and address = #{address}
            </if>
            <if test="phone != null">
                and phone = #{phone}
            </if>
            <if test="sendDate != null">
                and sendDate = #{sendDate}
            </if>
            <if test="orderDate != null">
                and orderDate = #{orderDate}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
        order by createTime
    </select>

    <select id="queryOrderThisMonth" resultType="map">
        select * from
        (select count(*) "orderCount", sum(amount) "amountCount"
        from order_main a
        where substr(orderDate,1,7) = #{month}) one,
        (select sum(b.num) "goodsCount"
        from order_main a
        left join order_line b
        on a.id = b.mainId
        where substr(a.orderDate,1,7) = #{month}) two
    </select>

    <select id="queryWholeOrderBySendDate" resultType="map">
        select a.id "id", a.name "name", a.phone "phone", a.address "address", a.orderDate "orderDate", amount "amount", a.remark "remark",
        b.model "model", b.color "color", b.format "format", b.price "price", b.num "num", b.discount "discount"
        from order_main a
        left join order_line b
        on a.id = b.mainId
        where a.sendDate = #{sendDate} and a.status = '3'
        order by a.createTime
    </select>

    <select id="queryOrderDetail" resultType="map">
        select *
        from order_line a
        where mainId = #{id}
    </select>

    <select id="queryTimeLine" resultType="map">
        select *
        from order_timeLine
        where mainId = #{mainId}
        order by timestamp
    </select>

    <insert id="insertTimeLine">
        insert into order_timeLine (id, mainId, timestamp, content)
        value (REPLACE(UUID(),"-",""), #{mainId}, #{timestamp}, #{content})
    </insert>

    <insert id="insertOrder">
        <selectKey keyProperty="id" resultType="String" order="BEFORE">
            select UUID() from dual
        </selectKey>
        insert into order_main (id, name, phone, address, orderDate, sendDate, remark, createTime, createBy, status)
        value (REPLACE(#{id},"-",""), #{name}, #{phone}, #{address}, #{orderDate}, #{sendDate}, #{remark}, #{createTime}, #{createBy}, #{status})
    </insert>

    <update id="updateOrder">
        update order_main
        <trim prefix="set" suffixOverrides=",">
            <if test="name != null">
                name = #{name},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
            <if test="sendDate != null">
                sendDate = #{sendDate},
            </if>
            <if test="amount != null">
                amount = #{amount},
            </if>
            <if test="remark != null">
                remark = #{remark},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteOrder">
        delete from order_main where id = #{id}
    </delete>

    <delete id="deleteOrderDetail">
        delete from order_line where id = #{id}
    </delete>

    <insert id="batchInsert">
        insert into order_line (mainId, id, model, color, format, price, num) values
        <foreach collection="orderDetails" item="item" separator=",">
            (#{item.mainId}, REPLACE(UUID(),"-",""), #{item.model}, #{item.color}, #{item.format}, #{item.price}, #{item.num})
        </foreach>
    </insert>

    <insert id="batchUpdate">
        replace into order_line (mainId, id, model, color, format, price, num, status) values
        <foreach collection="orderDetails" item="item" separator=",">
            (#{item.mainId}, #{item.id}, #{item.model}, #{item.color}, #{item.format}, #{item.price}, #{item.num}, #{item.status})
        </foreach>
    </insert>

    <delete id="batchDelete">
        delete from order_line where id in
        <foreach collection="orderDetails" item="item" open="(" close=")" separator=",">
            #{item.id}
        </foreach>
    </delete>
</mapper>
